library(parallel)
detectCores()
get.extrema <- function(A, X, Y, gamma = 0, fitted.prob, estimand = c("all", "missing")) {

    estimand <- match.arg(estimand, c("all", "missing"))
    c <- as.numeric(estimand == "all")

    fitted.logit <- qlogis(fitted.prob)

    eg <- exp(-fitted.logit)
    Y <- Y[A == 1]
    eg <- eg[A == 1]
    eg <- eg[order(-Y)]
    Y <- Y[order(-Y)]

    ## maximization
    num.each.low <- Y * (c + exp(-gamma) * eg)
    num.each.up <- Y * (c + exp(gamma) * eg)
    num <- c(0, cumsum(num.each.up)) + c(rev(cumsum(rev(num.each.low))), 0)

    den.each.low <- (c + exp(-gamma) * eg)
    den.each.up <- (c + exp(gamma) * eg)
    den <- c(0, cumsum(den.each.up)) + c(rev(cumsum(rev(den.each.low))), 0)

    maximum <- max(num / den)
    ## print(den[which.max(num/den)] / n)

    ## minimization
    num <- c(0, cumsum(num.each.low)) + c(rev(cumsum(rev(num.each.up))), 0)
    den <- c(0, cumsum(den.each.low)) + c(rev(cumsum(rev(den.each.up))), 0)
    minimum <- min(num / den)
    ## print(den[which.min(num/den)] / n)

    c(minimum, maximum)

}

A
X
Y
estimand <- "all"
X <- data.matrix(X)
parallel <- TRUE
B <- 10
    out <- mclapply(1:B, function(iter) {
        s <- sample(1:n, n, TRUE);
        res <- NA;
        A <- A[s];
        X <- X[s, ];
        Y <- Y[s];
        fitted.prob <- predict(glm(A ~ X, family = "binomial", start = ps.model$coefs), X);
        res <- tryCatch(get.extrema(A, X, Y, gamma, fitted.prob, estimand),
                        error = function(e) {print(e)});
        res},
        mc.cores = detectCores())

gamma
gamma <- 0
gamma <- 1
res
    out <- mclapply(1:B, function(iter) {
        s <- sample(1:n, n, TRUE);
        res <- NA;
        A <- A[s];
        X <- X[s, ];
        Y <- Y[s];
        fitted.prob <- predict(glm(A ~ X, family = "binomial", start = ps.model$coefs), type = "response");
        res <- tryCatch(get.extrema(A, X, Y, gamma, fitted.prob, estimand),
                        error = function(e) {print(e)});
        res},
        mc.cores = detectCores())

res
library(devtools)
load_all()
install.packages("CrossScreening")
summary(nhanes.fish$fish.level)
bootsens.os(A, X, Y)
library(parallel)
bootsens.os(A, X, Y)
dim(X)
head(X)
bootsens.os(A, X1, Y)
bootsens.os(A, X1, Y)
bootsens.os(A, X1, Y, alpha = 0.1)
bootsens.os(A, X1, Y, gamma = 1, alpha = 0.1)
X1 <- model.matrix(~ . - 1, X)
bootsens.os(A, X1, Y, gamma = 1, alpha = 0.1)
document()
document()
document()
document()
check()
document()
document()
check()
install()
example(bootsens.os)
document()
install()
example(bootsens.os)
